% Fit Algorithms
% 
% 
% 
% Written by J.D. Sharp: 8/26/22
% Last updated by J.D. Sharp: 8/30/22
% 

% load gridded pCO2 and predictors if necessary
if ~exist('SOCAT_grid','var'); load('gridded_pco2','SOCAT_grid'); end
if ~exist('Preds_grid','var'); load('gridded_predictors','Preds_grid'); end

% define regions of interest
region = {'CCS' 'AK' 'EastCoast' 'GoM_Car' 'Hawaii'};

for n = 1%:length(region)

    %% Create X and Y variables, as well as indices
    % create temporary versions of grid variables
    lon_tmp = repmat(Preds_grid.(region{n}).lon,1,Preds_grid.(region{n}).dim.y,...
        Preds_grid.(region{n}).dim.z);
    lat_tmp = repmat(Preds_grid.(region{n}).lat',Preds_grid.(region{n}).dim.x,1,...
        Preds_grid.(region{n}).dim.z);
    month_of_year_tmp = repmat(permute(Preds_grid.(region{n}).month_of_year,[3 2 1]),...
        Preds_grid.(region{n}).dim.x,Preds_grid.(region{n}).dim.y,1);
    sin_month_of_year_tmp = repmat(permute(sin((2.*pi.*Preds_grid.(region{n}).month_of_year)./12),[3 2 1]),...
        Preds_grid.(region{n}).dim.x,Preds_grid.(region{n}).dim.y,1);
    cos_month_of_year_tmp = repmat(permute(cos((2.*pi.*Preds_grid.(region{n}).month_of_year)./12),[3 2 1]),...
        Preds_grid.(region{n}).dim.x,Preds_grid.(region{n}).dim.y,1);
    year_tmp = repmat(permute(Preds_grid.(region{n}).year,[3 2 1]),...
        Preds_grid.(region{n}).dim.x,Preds_grid.(region{n}).dim.y);
    dist_tmp = repmat(Preds_grid.(region{n}).Dist,1,1,...
        Preds_grid.(region{n}).dim.z);
    bathy_tmp = repmat(Preds_grid.(region{n}).Bathy,1,1,...
        Preds_grid.(region{n}).dim.z);

    % create indices
    idx_clust = ~isnan(Preds_grid.(region{n}).SSS) & ...
           repmat(Preds_grid.(region{n}).ocean_mask,1,1,Preds_grid.(region{n}).dim.z);
    idx_mod = ~isnan(SOCAT_grid.(region{n}).fco2_ave_wtd) & ...
           repmat(Preds_grid.(region{n}).ocean_mask,1,1,Preds_grid.(region{n}).dim.z);

    % create X and Y
    X_clust = [lon_tmp(idx_clust) lat_tmp(idx_clust) month_of_year_tmp(idx_clust) sin_month_of_year_tmp(idx_clust) ...
         cos_month_of_year_tmp(idx_clust) year_tmp(idx_clust) ...
         Preds_grid.(region{n}).SSS(idx_clust) Preds_grid.(region{n}).SSH(idx_clust) ...
         Preds_grid.(region{n}).SST(idx_clust) log10(Preds_grid.(region{n}).CHL(idx_clust)) ...
         Preds_grid.(region{n}).WindSpeed(idx_clust) bathy_tmp(idx_clust) dist_tmp(idx_clust) ...
         Preds_grid.(region{n}).MLD(idx_clust) Preds_grid.(region{n}).mslp(idx_clust) ...
         Preds_grid.(region{n}).pCO2_atm(idx_clust)];
    X_mod = [lon_tmp(idx_mod) lat_tmp(idx_mod) month_of_year_tmp(idx_mod) sin_month_of_year_tmp(idx_mod) ...
         cos_month_of_year_tmp(idx_mod) year_tmp(idx_mod) ...
         Preds_grid.(region{n}).SSS(idx_mod) Preds_grid.(region{n}).SSH(idx_mod) ...
         Preds_grid.(region{n}).SST(idx_mod) log10(Preds_grid.(region{n}).CHL(idx_mod)) ...
         Preds_grid.(region{n}).WindSpeed(idx_mod) bathy_tmp(idx_mod) dist_tmp(idx_mod) ...
         Preds_grid.(region{n}).MLD(idx_mod) Preds_grid.(region{n}).mslp(idx_mod) ...
         Preds_grid.(region{n}).pCO2_atm(idx_mod)];
    Y_mod = SOCAT_grid.(region{n}).fco2_ave_wtd(idx_mod);

    % headers for training data
    headers = {'Lon.' 'Lat.' 'month' 'sin_month' 'cos_month' 'year' 'SSS' ...
               'SSH' 'SST' 'CHL' 'Wind' 'Bathy.' 'Dist.' 'MLD' ...
               'MSLP' 'pCO2_atm'};

    % clean up
    clear lon_tmp lat_tmp cos_month_of_year_tmp sin_month_of_year_tmp
    clear month_of_year_tmp year_tmp dist_tmp bathy_tmp

    %% cluster gridded data
    disp(['Clustering data (' region{n} ')']);
    % define variable index
    vars = {'SSS' 'SSH' 'SST' 'Wind'};
    idx_vars = find(ismember(headers,vars));
    % obtain gridded group numbers
    Preds_grid.(region{n}).groups = cluster_data(X_clust,idx_vars,...
        Preds_grid.(region{n}).lat,Preds_grid.(region{n}).lon,...
        Preds_grid.(region{n}).month_of_year,idx_clust,region{n});
    % clean up
    clear vars idx_vars idx_clust

    %% fit NNs
    disp(['Fitting NN (' region{n} ')']);
    % define variable index
    vars = {'Lon.' 'Lat.' 'sin_month' 'cos_month' 'year' 'SSS' ...
            'SSH' 'SST' 'CHL' 'Wind' 'Bathy.' 'Dist.' 'MLD' ...
            'MSLP' 'pCO2_atm'};
    idx_vars = find(ismember(headers,vars));
    % define group indices
    idx_group = Preds_grid.(region{n}).groups(idx_mod);
    % fit model
    [Mods.(region{n}).nn,Mods.(region{n}).err_nn,...
     Mods.(region{n}).rmse_nn,Mods.(region{n}).r2_nn,...
     Mods.(region{n}).Y_fit_nn,Mods.(region{n}).delta_nn] = ...
        fit_nn(X_mod,Y_mod,idx_vars,idx_group);

    %% fit RFRs
    disp(['Fitting RFR (' region{n} ')']);
    % define variable index
    vars = {'Lon.' 'Lat.' 'sin_month' 'cos_month' 'year' 'SSS' ...
            'SSH' 'SST' 'CHL' 'Wind' 'Bathy.' 'Dist.' 'MLD' ...
            'MSLP' 'pCO2_atm'};
    idx_vars = find(ismember(headers,vars));
    % define group indices
    idx_group = Preds_grid.(region{n}).groups(idx_mod);
    % fit model
    [Mods.(region{n}).rfr,Mods.(region{n}).err_rfr,...
     Mods.(region{n}).rmse_rfr,Mods.(region{n}).r2_rfr,...
     Mods.(region{n}).Y_fit_rfr,Mods.(region{n}).delta_rfr] = ...
        fit_rfr(X_mod,Y_mod,idx_vars,idx_group,headers);

end